import streamlit as st
import pandas as pd
import requests
from config import API_URL, EXAMPLE_CSV_PATH, CONFIDENCE_THRESHOLDS

st.set_page_config(page_title='–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞', layout='centered')
st.title('üö¶ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞')
st.markdown('–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –µ—ë —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.')

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV
st.subheader('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ç–æ–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞')
with open(EXAMPLE_CSV_PATH, 'rb') as file:
    st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω CSV',
                       data=file,
                       file_name='example.csv',
                       mime='text/csv',
                       help='–°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏')

uploaded_file = st.file_uploader('üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª', type=['csv'])

if uploaded_file:
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        predict_clicked = st.button('üîÆ **–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ CSV**', key='predict_csv', use_container_width=True)

    if predict_clicked:
        with st.spinner('–ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...'):
            files = {"file": (uploaded_file.name,
                              uploaded_file.getvalue(),
                              "text/csv")}
            response = requests.post(f"{API_URL}/predict_csv", files=files)

        if response.status_code == 200:
            result = response.json()
            if "error" in result:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                st.toast('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
                st.subheader('üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ CSV')

                for i, row in enumerate(result["results"]):
                    col_left, col_right = st.columns([2, 1])
                    with col_left:
                        st.markdown(f'**–°—Ç—Ä–æ–∫–∞ {i+1}:**')
                        st.write(f'üîπ –ö–ª–∞—Å—Å: `{row["prediction"]}`')
                        st.write(f'üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: **{row["confidence"]:.2f}**')

                        if row["confidence"] < CONFIDENCE_THRESHOLDS["low"]:
                            st.warning('‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞')
                        elif row["confidence"] < CONFIDENCE_THRESHOLDS["medium"]:
                            st.info('üü† –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
                        else:
                            st.success('üü¢ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')

                    with col_right:
                        probs_df = pd.DataFrame({
                            '–ö–ª–∞—Å—Å': list(row["probabilities"].keys()),
                            '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': list(row["probabilities"].values())
                        })
                        st.bar_chart(probs_df.set_index('–ö–ª–∞—Å—Å'))

                    st.markdown('---')
        else:
            try:
                error_detail = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} ‚Äî {error_detail}")
            except Exception:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")


# –†—É—á–Ω–æ–π –≤–≤–æ–¥
st.subheader('üìù –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é')

features = {
    "Destination_Port": st.number_input('Destination Port', min_value=0, max_value=65535, value=443,
                                        help='–ü–æ—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ —Å–µ—Ç–µ–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏'),
    "Init_Win_bytes_forward": st.number_input('Init_Win_bytes_forward', min_value=0, max_value=1_000_000, value=8192,
                                              help='–ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'),
    "Init_Win_bytes_backward": st.number_input('Init_Win_bytes_backward', min_value=0, max_value=1_000_000, value=8192,
                                               help='–ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤ –±–∞–π—Ç–∞—Ö –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'),
    "Bwd_Packets_s": st.number_input('Bwd Packets/s', min_value=0.0, max_value=1_000_000.0, value=1500.0,
                                     help='–°–∫–æ—Ä–æ—Å—Ç—å –ø–∞–∫–µ—Ç–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (–ø–∞–∫–µ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É)'),
    "min_seg_size_forward": st.number_input('min_seg_size_forward', min_value=0, max_value=1500, value=40,
                                            help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'),
    "Fwd_IAT_Std": st.number_input('Fwd IAT Std', min_value=0.0, max_value=1_000_000.0, value=5000.0,
                                   help='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'),
    "Flow_IAT_Min": st.number_input('Flow IAT Min', min_value=0.0, max_value=1_000_000.0, value=1000.0,
                                    help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ª—é–±—ã–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –≤ –ø–æ—Ç–æ–∫–µ'),
    "Bwd_Packet_Length_Min": st.number_input('Bwd Packet Length Min', min_value=0, max_value=1500, value=60,
                                             help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞–∫–µ—Ç–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏'),
    "Fwd_Packets_s": st.number_input('Fwd Packets/s', min_value=0.0, max_value=1_000_000.0, value=2000.0,
                                     help='–°–∫–æ—Ä–æ—Å—Ç—å –ø–∞–∫–µ—Ç–æ–≤ –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (–ø–∞–∫–µ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É)'),
    "Fwd_IAT_Min": st.number_input('Fwd IAT Min', min_value=0.0, max_value=1_000_000.0, value=1000.0,
                                   help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –≤ –ø—Ä—è–º–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏')
}

col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    predict_clicked = st.button('üîÆ **–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º**', key='predict_manual', use_container_width=True)

if predict_clicked:
    with st.spinner('üîÑ –ú–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç...'):
        response = requests.post(f"{API_URL}/predict", json=features)

    if response.status_code == 200:
        result = response.json()
        if "error" in result:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            st.toast('‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
            col_left, col_right = st.columns([2, 1])
            with col_left:
                st.subheader('üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º')
                st.write(f'üîπ –ö–ª–∞—Å—Å: **{result["prediction"]}**')
                st.write(f'üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: **{result["confidence"]:.2f}**')

                if result["confidence"] < CONFIDENCE_THRESHOLDS["low"]:
                    st.warning('‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞')
                elif result["confidence"] < CONFIDENCE_THRESHOLDS["medium"]:
                    st.info('üü† –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
                else:
                    st.success('üü¢ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')

            with col_right:
                probs_df = pd.DataFrame({
                    '–ö–ª–∞—Å—Å': list(result["probabilities"].keys()),
                    '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': list(result["probabilities"].values())
                })
                st.bar_chart(probs_df.set_index('–ö–ª–∞—Å—Å'))
    else:
        try:
            error_detail = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} ‚Äî {error_detail}")
        except Exception:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")